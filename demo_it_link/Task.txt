Task for application

Текстовый файлик со ссылками на картинки  - https://it-link.ru/test/images.txt
В каждой строке в нём могут быть ссылки на картинки, ссылки не на картинки, и совсем не ссылки.


## Basic

Приложение с двумя экранами
- Грид с превьюшками картинок (уменьшёнными до приемлемых размеров, не оригиналами).
    На местах не-картинок и не-ссылок нужны заглушки.
- По нажатию на превьюшку — оригинал картинки целиком.



## Required

– Автоматически выкачивать файл с сервера, после запуска приложения.
После скачивания файл можно кэшировать на диске в приватном каталоге приложения.
Не сохранять файл в сам проект.
/*
Изначальные мысли
    Смущает фраза "после запуска приложения".
    То есть имеется ввиду, что в начале старта приложения запускается определенная функция, которая скачивает файл и сохраняет его.
    Старт приложения - application(_:didFinishLaunchingWithOptions:) либо SwiftUI way - в init для StateObject для App.
    Проблема, которую я тут вижу это то, что данный файл является частью useCase по показу картинок - главного экрана.
    В моем понимании правильней было бы включить этот функционал в класс repository, то есть в абстракцию над данными.
    View опирается на доменную модель для отображения, а ее мы получаем из repository.
    Service может выступать фасадом для данного действия.
Как получилось
    Не хотелось мне в Service и Repo иметь состояние. Поэтому
    В корне приложения сделал StateObject который мониторит сеть, скачивает файл данных и возвращает view, передавая туда данные.
*/

– Если файл не загрузился, то при появлении сети автоматически загрузить снова.
/*
Воспользовался NWPathMonitor
    Прикрыл протоколом и передал как зависимость в StateObject
*/

– Уметь поворот экрана, менять количество столбцов в зависимости от ширины экрана, исходя из расчёта ширины ячейки 100-120 «пикселей».
/*
    SwiftUI Grid тут заметно облегчил задачу
*/


– Кэшировать оригиналы картинок и превьюшки на диск.
При повторном открытии картинки и при повторном запуске приложения ранее сохранённые превьюшки и оригиналы картинок следует загружать с диска.
/*
    Сделал Singleton ImageLoader которым просто воспользоваться, и который внутри хранит логику получения картинки.
*/

– Если url валидный, но картинка не загрузилась, то возможность повторить загрузку.
/*
    Обрабатывается с помощью внутри AsyncImageView, через gesture
*/

– Ночная тема.
/*
    Отдельный tab приложения для настроек
*/



## Bonus

– Приближение картинки пальцами.
/*
Gesture на картинку
    Проблема была правильно показать в DetailView при перелистывании
    Помучался с позиционированием, чтобы картинка обрезалось по краям и растягивалась на весь экран
*/

– Перелистывание картинок.
/*
    TabView который который принес выше описанные проблемы
*/

– Переключение в полноэкранный режим и обратно по нажатию на картинку или пустое пространство: скрывать и показывать обратно топбар приложения, системные уведомления и системную панель навигации.
/*
    Топбар и navigationFlow как таковой не использовался, сделано со ZStack
    Есть отдельная кнопка закрытия, тап по пустому пространству тут лишний
*/

– Поделиться url картинки с другими приложениями, в том числе открыть в браузере.
/*
    Через Menu и ActivityView
*/
